const R23 :f64 = 0.5*0.5*0.5*0.5*0.5*0.5*0.5*0.5*0.5*0.5*0.5*0.5*0.5*0.5*0.5*0.5*0.5*0.5*0.5*0.5*0.5*0.5*0.5;
const R46 :f64 = R23*R23;
const T23 :f64 = 2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0*2.0;
const T46 :f64 = T23*T23;

pub fn randlc( x: &mut f64, a: f64) -> f64{

    let mut t1 :f64;
    let t2 :f64;
    let t3 :f64;
    let t4 :f64;
    let a1 :f64;
    let a2 :f64;
    let x1 :f64;
    let x2 :f64;
    let z :f64;

    /*
	 * ---------------------------------------------------------------------
	 * break A into two parts such that A = 2^23 * A1 + A2.
	 * ---------------------------------------------------------------------
	 */
	t1 = R23 * a;
	a1 = t1.floor();
	a2 = a - T23 * a1;

    /*
	 * ---------------------------------------------------------------------
	 * break X into two parts such that X = 2^23 * X1 + X2, compute
	 * Z = A1 * X2 + A2 * X1  (mod 2^23), and then
	 * X = 2^23 * Z + A2 * X2  (mod 2^46).
	 * ---------------------------------------------------------------------
	 */
	t1 = R23 * *x;
	x1 = t1.floor();
	x2 = *x - T23 * x1;
	t1 = a1 * x2 + a2 * x1;
	t2 = (R23 * t1).floor();
	z = t1 - T23 * t2;
	t3 = T23 * z + a2 * x2;
	t4 = (R46 * t3).floor();
	*x = t3 - T46 * t4;

	R46 * *x

}

pub fn vranlc(n: usize, x_seed: &mut f64, a : f64, y: &mut Vec<f64>){
    //let i : usize;

    let mut x :f64;
    let mut t1 :f64;
    let mut t2 :f64;
    let mut t3 :f64;
    let mut t4 :f64;
    let a1 :f64;
    let a2 :f64;
    let mut x1 :f64;
    let mut x2 :f64;
    let mut z :f64;

    /*
	 * ---------------------------------------------------------------------
	 * break A into two parts such that A = 2^23 * A1 + A2.
	 * ---------------------------------------------------------------------
	 */
	t1 = R23 * a;
	a1 = t1.floor();
	a2 = a - T23 * a1;
	x = *x_seed;

    /*
	 * ---------------------------------------------------------------------
	 * generate N results. this loop is not vectorizable.
	 * ---------------------------------------------------------------------
	 */

     for i in 0..n {
		/*
		 * ---------------------------------------------------------------------
		 * break X into two parts such that X = 2^23 * X1 + X2, compute
		 * Z = A1 * X2 + A2 * X1  (mod 2^23), and then
		 * X = 2^23 * Z + A2 * X2  (mod 2^46).
		 * ---------------------------------------------------------------------
		 */
		t1 = R23 * x;
		x1 = t1.floor();
		x2 = x - T23 * x1;
		t1 = a1 * x2 + a2 * x1;
		t2 = (R23 * t1).floor();
		z = t1 - T23 * t2;
		t3 = T23 * z + a2 * x2;
		t4 = (R46 * t3).floor();
		x = t3 - T46 * t4;
		y[i] = R46 * x;
	}
 
    *x_seed = x;
}
